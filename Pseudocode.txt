// Global variable initialization
std::string currentRecordFile = "current_record.txt";
int single = 65, twin = 100;
int Qsingle = 20, Qtwin = 40, Qtowel = 75, Qwater = 100, Qbiscuit = 100, Qpillow = 75;
int quant, choice, totalRoom = 0;
int totalRooms = 0, totalSingle = 0, totalTwin = 0, totalTowel = 0, totalWater = 0, totalBiscuit = 0, totalPillow = 0;
int sSingle, sTwin, sTowel, sWater, sBiscuit, sPillow;
int count = 0;
std::string userID, password, id, pass;

// Main function
void main() {
    readCurrentRecord();
    cout << "Welcome to the Hotel Management System!\n";
    displayWelcomeMessageAndMenuOptions();
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1: registration(); break;
        case 2: login(); break;
        case 3: forgot(); break;
        case 4: displayFarewellMessageAndExit(); break;
        default: displayInvalidChoiceMessageAndCallMain(); break;
    }
}

// Login function
void login() {
    cout << "Enter User ID: ";
    cin >> userID;
    cout << "Enter Password: ";
    cin >> password;

    if (credentialsMatchAdminCredentials()) {
        cout << "Admin login successful!\n";
        adminMenu();
    } else {
        if (checkCredentialsInAdminCredentialsFile()) {
            setLoginAttemptCountTo1();
            cout << "User login successful!\n";
            userMenu();
        } else {
            cout << "Login failed. Invalid credentials.\n";
            main();
        }
    }
}

// Registration function
void registration() {
    cout << "Enter desired User ID: ";
    cin >> id;
    cout << "Enter Password: ";
    cin >> pass;

    storeUserCredentialsInAdminCredentialsFile();
    cout << "Registration successful!\n";
    login();
}

// Forgot function
void forgot() {
    cout << "Enter User ID: ";
    cin >> id;

    if (searchForUserCredentialsInAdminCredentialsFile()) {
        cout << "Enter a new Password: ";
        cin >> pass;
        updatePasswordInFile();
        cout << "Password updated successfully!\n";
        login();
    } else {
        cout << "User ID not found.\n";
        forgot();
    }
}

// User Menu function
void userMenu() {
    displayUserMenuOptions();
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1: roomBooking(); break;
        case 2: amenitiesRequest(); break;
        case 3: checkBill(); break;
        case 4: displayLogoutMessageAndCallMain(); break;
        default: displayInvalidChoiceMessageAndCallUserMenu(); break;
    }
}

// Room Booking function
void roomBooking() {
    readCurrentRecord();

    if (noRoomsAvailable()) {
        cout << "No rooms available.\n";
        return;
    }

    promptUserToSelectRoomType();
    updateCurrentRecordFileToReflectBooking();
    createUserBillReportFile();
    calculateRoomBookingCost();
    cout << "Room booked successfully!\n";
    userMenu();
}

// Amenities Request function
void amenitiesRequest() {
    readCurrentRecord();

    if (userHasNotBookedRoom()) {
        cout << "You must book a room first.\n";
        userMenu();
    }

    promptUserToSelectAmenity();
    addAmenityToBillReportFile();
    updateStocksInCurrentRecordFile();
    calculateCostOfRequestedAmenity();
    cout << "Amenities request made successfully!\n";
    userMenu();
}

// Check Bill function
void checkBill() {
    if (userHasNoBillReportFile()) {
        cout << "No bill to check.\n";
        promptUserToExitOrGoBackToUserMenu();
    }

    readBillReportFile();
    extractTotalSpending();
    displayBillDetails();
    promptUserToExitOrGoBackToUserMenu();
}

// Read Current Record function
void readCurrentRecord() {
    openCurrentRecordFileForReading();

    if (fileDoesNotExist()) {
        createFileAndInitializeQuantities();
    } else {
        readQuantitiesFromFileAndCopyToGlobalVariables();
    }
}

// Reset Current Record function
void resetCurrentRecord() {
    cout << "Resetting current record...\n";
    promptUserForDateOfReset();
    renameCurrentRecordFile();
    readCurrentRecord();
}

// Admin Menu function
void adminMenu() {
    displayAdminMenuOptions();
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1: viewRooms(); break;
        case 2: viewAmenities(); break;
        case 3: salesReport(); break;
        case 4: resetCurrentRecord(); break;
        case 5: logout(); break;
    }
}

// View Rooms function
void viewRooms() {
    readCurrentRecord();
    displayAvailableSingleAndTwinRooms();
    promptAdminToExitOrGoBackToAdminMenu();
}

// View Amenities function
void viewAmenities() {
    displayAvailableAmenities();
    promptAdminToExitOrGoBackToAdminMenu();
}

// View Prices function
void viewPrices() {
    displayPricesForEachItem();
}

// Sales Report function
void salesReport() {
    calculateTotalSales();
    displaySalesReport();
    promptAdminToExitOrGoBackToAdminMenu();
}

// END
